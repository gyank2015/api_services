"""
Django settings for shim_service project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Get environment vars, later to be set by deployment engine
MONGODB_TEST_HOST = os.environ['MONGODB_TEST_HOST']
MONGODB_TEST_PORT = (os.environ['MONGODB_TEST_PORT'])
MONGODB_PROD_HOST = os.environ['MONGODB_PROD_HOST']
MONGODB_PROD_PORT = (os.environ['MONGODB_PROD_PORT'])
UPLOAD_SERVICE_TEST_HOST = os.environ['UPLOAD_SERVICE_TEST_HOST']
UPLOAD_SERVICE_TEST_PORT = os.environ['UPLOAD_SERVICE_TEST_PORT']
ROOFTOP_DAMAGE_ANALYSIS_TEST_HOST = os.environ['ROOFTOP_DAMAGE_ANALYSIS_TEST_HOST']
ROOFTOP_DAMAGE_ANALYSIS_TEST_PORT = os.environ['ROOFTOP_DAMAGE_ANALYSIS_TEST_PORT']
CAR_DAMAGE_ANALYSIS_TEST_HOST = os.environ['CAR_DAMAGE_ANALYSIS_TEST_HOST']
CAR_DAMAGE_ANALYSIS_TEST_PORT = os.environ['CAR_DAMAGE_ANALYSIS_TEST_PORT']
SHIM_SERVICE_TEST_HOST = os.environ['SHIM_SERVICE_TEST_HOST']
SHIM_SERVICE_TEST_PORT = os.environ['SHIM_SERVICE_TEST_PORT']


ENV_MEDIA_ROOT = os.environ['MEDIA_ROOT']
LOGS_ROOT = os.environ['LOGS_ROOT']
DL_MODELS_ROOT = os.environ['DL_MODELS_DIR_ROOT']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '5iew%q)dry$@5efcbf5gy6e5)9rfm$ua4s)u7=rovsj^!q_+9%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['172.16.28.59','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_swagger',
    'avengers_django_models_app',
    'corsheaders',
    'rest_framework.authtoken',

]

AUTH_USER_MODEL = 'avengers_django_models_app.CustomUser'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'shim_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shim_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'test',
        # 'HOST': MONGODB_TEST_HOST,
        # 'PORT': MONGODB_TEST_PORT,
        # 'USER': 'admin',
        # 'PASSWORD': 'admin',
    }
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    # 'LOGIN_URL':'/login',
    # 'LOGOUT_URL':'/swagger'

}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# CORS setup
CORS_ORIGIN_ALLOW_ALL = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

}


ABS_MEDIA_ROOT = ENV_MEDIA_ROOT
PROJ_MEDIA_ROOT = os.path.join(ENV_MEDIA_ROOT, 'rooftop_damage_analysis')
MEDIA_ROOT = os.path.abspath(ENV_MEDIA_ROOT)
MEDIA_URL = '/media/'


